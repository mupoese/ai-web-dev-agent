{
  "name": "ai-web-dev-agent",
  "displayName": "AI Web Developer Agent",
  "description": "AI-powered web development assistant with multiple AI interfaces",
  "version": "0.0.1",
  "engines": {
    "vscode": "^1.60.0"
  },
  "categories": [
    "Other"
  ],
  "activationEvents": [
    "onCommand:ai-web-dev-agent.analyzeCode",
    "onCommand:ai-web-dev-agent.generateCode",
    "onCommand:ai-web-dev-agent.refactorCode",
    "onCommand:ai-web-dev-agent.createProject",
    "onCommand:ai-web-dev-agent.manageDependencies",
    "onCommand:ai-web-dev-agent.showSettings",
    "onCommand:ai-web-dev-agent.startDebugging",
    "onCommand:ai-web-dev-agent.analyzeError",
    "onCommand:ai-web-dev-agent.suggestFixForBreakpoint",
    "onCommand:ai-web-dev-agent.showInputPanel",
    "onCommand:ai-web-dev-agent.showOutputPanel",
    "onView:aiWebDevProjectStructure"
  ],
  "main": "./dist/extension.js",
  "contributes": {
    "commands": [
      {
        "command": "ai-web-dev-agent.analyzeCode",
        "title": "AI: Analyze Code"
      },
      {
        "command": "ai-web-dev-agent.generateCode",
        "title": "AI: Generate Code"
      },
      {
        "command": "ai-web-dev-agent.refactorCode",
        "title": "AI: Refactor Code"
      },
      {
        "command": "ai-web-dev-agent.createProject",
        "title": "AI: Create Project"
      },
      {
        "command": "ai-web-dev-agent.manageDependencies",
        "title": "AI: Manage Dependencies"
      },
      {
        "command": "ai-web-dev-agent.showSettings",
        "title": "AI: Show Settings"
      },
      {
        "command": "ai-web-dev-agent.startDebugging",
        "title": "AI: Start Debugging"
      },
      {
        "command": "ai-web-dev-agent.analyzeError",
        "title": "AI: Analyze Error"
      },
      {
        "command": "ai-web-dev-agent.suggestFixForBreakpoint",
        "title": "AI: Suggest Fix for Breakpoint"
      },
      {
        "command": "ai-web-dev-agent.showInputPanel",
        "title": "AI: Show Input Panel"
      },
      {
        "command": "ai-web-dev-agent.showOutputPanel",
        "title": "AI: Show Output Panel"
      },
      {
        "command": "ai-web-dev-agent.setOllamaApiKey",
        "title": "AI: Set Ollama API Key"
      },
      {
        "command": "ai-web-dev-agent.setHuggingFaceApiKey",
        "title": "AI: Set Hugging Face API Key"
      },
      {
        "command": "ai-web-dev-agent.setGroqApiKey",
        "title": "AI: Set Groq API Key"
      },
      {
        "command": "ai-web-dev-agent.setAnthropicApiKey",
        "title": "AI: Set Anthropic API Key"
      },
      {
        "command": "ai-web-dev-agent.setCohereApiKey",
        "title": "AI: Set Cohere API Key"
      },
      {
        "command": "ai-web-dev-agent.setGeminiApiKey",
        "title": "AI: Set Gemini API Key"
      },
      {
        "command": "ai-web-dev-agent.setMistralApiKey",
        "title": "AI: Set Mistral API Key"
      },
      {
        "command": "ai-web-dev-agent.setOpenAIApiKey",
        "title": "AI: Set OpenAI API Key"
      }
    ],
    "configuration": {
      "title": "AI Web Developer Agent",
      "properties": {
        "ai-web-dev-agent.aiProvider": {
          "type": "string",
          "default": "ollama",
          "enum": ["ollama", "huggingface", "groq", "anthropic", "cohere", "gemini", "mistral", "openai"],
          "description": "Select the AI provider to use"
        },
        "ai-web-dev-agent.ollama.apiUrl": {
          "type": "string",
          "default": "http://localhost:11434/api/generate",
          "description": "URL for the Ollama API"
        },
        "ai-web-dev-agent.ollama.model": {
          "type": "string",
          "default": "codellama",
          "description": "Ollama model to use"
        },
        "ai-web-dev-agent.huggingface.apiUrl": {
          "type": "string",
          "default": "https://api-inference.huggingface.co/models",
          "description": "URL for the Hugging Face API"
        },
        "ai-web-dev-agent.huggingface.apiKey": {
          "type": "string",
          "default": "",
          "description": "API Key for Hugging Face"
        },
        "ai-web-dev-agent.huggingface.model": {
          "type": "string",
          "default": "bigcode/starcoder",
          "description": "Hugging Face model to use"
        },
        "ai-web-dev-agent.groq.apiUrl": {
          "type": "string",
          "default": "https://api.groq.com/openai/v1/chat/completions",
          "description": "URL for the Groq API"
        },
        "ai-web-dev-agent.groq.apiKey": {
          "type": "string",
          "default": "",
          "description": "API Key for Groq"
        },
        "ai-web-dev-agent.groq.model": {
          "type": "string",
          "default": "mixtral-8x7b-32768",
          "description": "Groq model to use"
        },
        "ai-web-dev-agent.anthropic.apiUrl": {
          "type": "string",
          "default": "https://api.anthropic.com/v1/messages",
          "description": "URL for the Anthropic API"
        },
        "ai-web-dev-agent.anthropic.apiKey": {
          "type": "string",
          "default": "",
          "description": "API Key for Anthropic"
        },
        "ai-web-dev-agent.anthropic.model": {
          "type": "string",
          "default": "claude-3-opus-20240229",
          "description": "Anthropic model to use"
        },
        "ai-web-dev-agent.cohere.apiUrl": {
          "type": "string",
          "default": "https://api.cohere.ai/v1/generate",
          "description": "URL for the Cohere API"
        },
        "ai-web-dev-agent.cohere.apiKey": {
          "type": "string",
          "default": "",
          "description": "API Key for Cohere"
        },
        "ai-web-dev-agent.cohere.model": {
          "type": "string",
          "default": "command",
          "description": "Cohere model to use"
        },
        "ai-web-dev-agent.gemini.apiUrl": {
          "type": "string",
          "default": "https://generativelanguage.googleapis.com/v1beta/models",
          "description": "URL for the Gemini API"
        },
        "ai-web-dev-agent.gemini.apiKey": {
          "type": "string",
          "default": "",
          "description": "API Key for Gemini"
        },
        "ai-web-dev-agent.gemini.model": {
          "type": "string",
          "default": "gemini-pro",
          "description": "Gemini model to use"
        },
        "ai-web-dev-agent.mistral.apiUrl": {
          "type": "string",
          "default": "https://api.mistral.ai/v1/chat/completions",
          "description": "URL for the Mistral API"
        },
        "ai-web-dev-agent.mistral.apiKey": {
          "type": "string",
          "default": "",
          "description": "API Key for Mistral"
        },
        "ai-web-dev-agent.mistral.model": {
          "type": "string",
          "default": "mistral-medium",
          "description": "Mistral model to use"
        },
        "ai-web-dev-agent.openai.apiUrl": {
          "type": "string",
          "default": "https://api.openai.com/v1/chat/completions",
          "description": "URL for the OpenAI API"
        },
        "ai-web-dev-agent.openai.apiKey": {
          "type": "string",
          "default": "",
          "description": "API Key for OpenAI"
        },
        "ai-web-dev-agent.openai.model": {
          "type": "string",
          "default": "gpt-3.5-turbo",
          "description": "OpenAI model to use"
        }
      }
    },
    "viewsContainers": {
      "activitybar": [
        {
          "id": "ai-web-dev-agent",
          "title": "AI Web Dev Agent",
          "icon": "resources/icon.png"
        }
      ]
    },
    "views": {
      "ai-web-dev-agent": [
        {
          "id": "aiWebDevProjectStructure",
          "name": "Project Structure"
        }
      ]
    }
  },
  "scripts": {
    "vscode:prepublish": "npm run package",
    "compile": "webpack",
    "watch": "webpack --watch",
    "package": "webpack --mode production --devtool hidden-source-map",
    "compile-tests": "tsc -p . --outDir out",
    "watch-tests": "tsc -p . -w --outDir out",
    "pretest": "npm run compile-tests && npm run compile && npm run lint",
    "lint": "eslint src --ext ts",
    "test": "node ./out/test/runTest.js"
  },
  "devDependencies": {
    "@types/vscode": "^1.60.0",
    "@types/glob": "^7.1.3",
    "@types/mocha": "^8.2.2",
    "@types/node": "14.x",
    "@types/sinon": "^10.0.0",
    "eslint": "^7.27.0",
    "@typescript-eslint/eslint-plugin": "^4.26.0",
    "@typescript-eslint/parser": "^4.26.0",
    "glob": "^7.1.7",
    "mocha": "^8.4.0",
    "sinon": "^10.0.0",
    "typescript": "^4.3.2",
    "vscode-test": "^1.5.2",
    "ts-loader": "^9.2.2",
    "webpack": "^5.38.1",
    "webpack-cli": "^4.7.0"
  },
  "dependencies": {
    "axios": "^0.21.1"
  }
}